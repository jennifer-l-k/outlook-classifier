{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/./src/commands/commands.js","webpack://office-addin-taskpane-js/webpack/runtime/global"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global g, global, Office, self, window, mailbox, mailboxItem, classifications, classifierRegexp, classifiedSubjectRegexp */\n\n\nlet mailboxItem;\nlet mailbox;\nconst g = getGlobal();\n\nOffice.onReady(function (info) {\n    // If needed, Office.js is ready to be called\n    mailboxItem = Office.context.mailbox.item;\n    mailbox = Office.context.mailbox;\n\n    for (let name in classifications) {\n        let classification = classifications[name];\n        g[classification.globalFunction] = actionMarkFactory(classification);\n    }\n\n    console.log(`Office.js is now ready in ${info.host} on ${info.platform}`);\n});\n\nfunction getGlobal() {\n    return typeof self !== \"undefined\" ?\n        self :\n        typeof window !== \"undefined\" ?\n            window :\n            typeof global !== \"undefined\" ?\n                global :\n                undefined;\n}\n\n// The add-in command functions need to be available in global scope\ng.validateBody = validateBody;\n\nlet classifications = {\n    \"white\": {\n        \"name\": \"TLP:WHITE\",\n        \"globalFunction\": \"actionMarkWhite\",\n        \"subject\": \"[Classified White âšª]\",\n        \"icon80\": \"Icon.80x80\"\n    },\n    \"green\": {\n        \"name\": \"TLP:GREEN\",\n        \"globalFunction\": \"actionMarkGreen\",\n        \"subject\": \"[Classified Green ðŸŸ¢]\",\n        \"icon80\": \"IconGreen.80x80\"\n    },\n    \"amber\": {\n        \"name\": \"TLP:AMBER\",\n        \"globalFunction\": \"actionMarkAmber\",\n        \"subject\": \"[Classified Amber ðŸŸ ]\",\n        \"icon80\": \"IconOrange.80x80\"\n    },\n    \"red\": {\n        \"name\": \"TLP:RED\",\n        \"globalFunction\": \"actionMarkRed\",\n        \"subject\": \"[Classified Red ðŸ”´]\",\n        \"icon80\": \"IconRed.80x80\"\n    }\n}\n\nconst classifierRegexp = /\\s*\\[classified (white|green|amber|red) \\W\\]\\s*/giu;\nconst classifiedSubjectRegexp = /^(?:\\s?re:\\s?|\\s?aw:\\s?)*\\s*\\[classified (white|green|amber|red) \\W\\].*/iu;\n\nfunction removeClassification(str) {\n    return str.replace(classifierRegexp, \" \").trim();\n}\n\nfunction addClassificationPrefix(classification, str) {\n    if (!classification) {\n        return str;\n    }\n    return classification.subject + \" \" + str;\n}\n\nfunction getClassification(subject) {\n    subject = subject.toLowerCase();\n    if (classifiedSubjectRegexp.test(subject)) {\n        let matches = subject.match(classifiedSubjectRegexp);\n        return classifications[matches[1]];\n    } else {\n        return null;\n    }\n}\n\nfunction normalizeClassification(subject) {\n    let classification = getClassification(subject);\n\n    if (!classification) {\n        return subject\n    }\n\n    subject = removeClassification(subject)\n    subject = addClassificationPrefix(classification, subject)\n    return subject\n}\n\nfunction actionMarkFactory(classification) {\n\n    return function (event) {\n\n        let successMessage = {\n            type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n            message: \"Marked message \" + classification.name,\n            icon: classification.icon80,\n            persistent: false,\n        };\n\n        let errorMessage = {\n            type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\n            message: \"Failed to mark message (requested \" + classification.name + \")\",\n        };\n\n        setSubjectPrefix(classification, function (ret) {\n\n            if (ret) {\n                // Show a notification message\n                Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", successMessage);\n\n            } else {\n                // Show an error message\n                Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", errorMessage);\n            }\n\n            // Be sure to indicate when the add-in command function is complete\n            event.completed();\n\n        });\n\n    };\n\n}\n\n// Set the subject of the item that the user is composing.\nfunction setSubjectPrefix(requestedClassification, callback) {\n\n    // Check conversation history\n    findConversationSubjects(mailboxItem.conversationId, function (values) {\n\n        let classifiedConversation = false;\n        let classificationConversation = \"\";\n\n        for (value of values) {\n            let curClassification = getClassification(value);\n            if (curClassification) {\n                classifiedConversation = true;\n                classificationConversation = curClassification;\n                break;\n            }\n        }\n\n        // Check current subject\n        mailboxItem.subject.getAsync(\n            function (asyncResult) {\n                if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                    console.log(asyncResult.error.message);\n                    callback(false);\n                } else {\n                    // Successfully got the subject, display it.\n\n                    let subject = asyncResult.value;\n                    let curClassification = getClassification(subject);\n\n                    if (curClassification) {\n                        // Item subject classified\n\n                        if (classifiedConversation) {\n                            // Item is marked and part of classified conversation\n                            if (curClassification.subject === classificationConversation.subject && classificationConversation.subject === requestedClassification.subject) {\n                                // Classification already matches, normalize\n                                subject = normalizeClassification(subject);\n                            } else {\n                                // Do not allow reclassifying\t                         \n                                callback(false);\n                                return;\n                            }\n                            //prefix = curClassification.subject;\n                        } else {\n                            // Item is marked and not part of classified conversation, allow changing\n                            subject = removeClassification(subject);\n                            subject = addClassificationPrefix(requestedClassification, subject);\n                        }\n                    } else {\n                        if (classifiedConversation) {\n\n                            // Iten is unmarked, and part of classified conversation, force mark\n                            subject = addClassificationPrefix(classificationConversation, subject);\n                        } else {\n                            // Proceed with marking image\n                            subject = addClassificationPrefix(requestedClassification, subject);\n                        }\n                    }\n\n                    mailboxItem.subject.setAsync(\n                        subject, null,\n                        function (asyncResult) {\n                            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                                console.log(asyncResult.error.message);\n                                callback(false);\n                            } else {\n                                // Successfully set the subject.\n                                // Do whatever appropriate for your scenario\n                                // using the arguments var1 and var2 as applicable.\n                                callback(true);\n\n\n\n                            }\n                        });\n\n\n\n\n                }\n            });\n\n\n\n    }, function (error) {\n\n        callback(false);\n\n    });\n\n\n\n}\n\n\nfunction validateBody(event) {\n    forceClassificationSubject(event);\n}\n\n// Check if the subject should be changed. If it is already changed allow send. Otherwise change it.\n// <param name=\"event\">MessageSend event passed from the calling function.</param>\nfunction forceClassificationSubject(event) {\n    mailboxItem.subject.getAsync({\n        asyncContext: event\n    },\n        function (asyncResult) {\n\n            let subject = asyncResult.value;\n            let curClassification = getClassification(subject);\n\n            if (!curClassification) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Please choose a classification for this email.'\n                });\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n                return;\n            }\n\n            getAttachmentClassification(function (res) {\n\n                if ((res.classification != undefined) && (res.classification != curClassification.name)) {\n                    mailboxItem.notificationMessages.addAsync('NoSend', {\n                        type: 'errorMessage',\n                        message: 'Message classified ' + curClassification.name + ' with ' + res.classification + ' attachment'\n                    });\n                    asyncResult.asyncContext.completed({\n                        allowEvent: false\n                    });\n                    return;\n                }\n\n                // Got valid classification, force normalization and category\n                // TODO move saveAsync calls to helper functions\n                Office.context.mailbox.item.saveAsync(\n                    function callback(result) {\n                        let itemId = result.value;\n                        setCategory(itemId, curClassification.name, asyncResult.asyncContext, function (context) {\n                            subject = normalizeClassification(subject);\n                            subjectOnSendChange(subject, context);\n                        });\n                    });\n\n            });\n\n\n\n\n            // Process the result.\n        });\n\n}\n\n\nfunction subjectOnSendChange(subject, event) {\n    mailboxItem.subject.setAsync(\n        subject, {\n        asyncContext: event\n    },\n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Unable to set the subject.'\n                });\n\n                // Block send.\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n            } else {\n                // Allow send.\n                asyncResult.asyncContext.completed({\n                    allowEvent: true\n                });\n            }\n\n        });\n}\n\n// Following functions adapted from easyEws\n// GNU Public License v3, https://github.com/davecra/easyEWS\n\nfunction asyncEws(soap, successCallback, errorCallback) {\n\n    mailbox.makeEwsRequestAsync(soap, function (ewsResult) {\n        if (ewsResult.status === Office.AsyncResultStatus.Succeeded) {\n            console.log(\"makeEwsRequestAsync success. \" + ewsResult.status);\n            let parser = new DOMParser();\n            let xmlDoc = parser.parseFromString(ewsResult.value, \"text/xml\");\n            successCallback(xmlDoc);\n        } else {\n            console.log(\"makeEwsRequestAsync failed. \" + ewsResult.error);\n            errorCallback(ewsResult.error);\n        }\n    });\n\n};\n\nfunction getNodes(node, elementNameWithNS) {\n    let elementWithoutNS = elementNameWithNS.substring(elementNameWithNS.indexOf(\":\") + 1);\n    let retVal = node.getElementsByTagName(elementNameWithNS);\n    if (retVal == null || retVal.length == 0) {\n        retVal = node.getElementsByTagName(elementWithoutNS);\n    }\n    return retVal;\n};\n\nfunction getSoapHeader(request) {\n    let result =\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n        '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' +\n        '               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"' +\n        '               xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"' +\n        '               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"' +\n        '               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">' +\n        '   <soap:Header>' +\n        '       <RequestServerVersion Version=\"Exchange2013\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\" soap:mustUnderstand=\"0\" />' +\n        '   </soap:Header>' +\n        '   <soap:Body>' + request + '</soap:Body>' +\n        '</soap:Envelope>';\n    return result;\n};\n\nfunction findConversationSubjects(conversationId, successCallback, errorCallback) {\n    if (!conversationId) {\n        // Trivial case, no conversations here\n        successCallback([]);\n    }\n    let soap =\n        '       <m:GetConversationItems>' +\n        '           <m:ItemShape>' +\n        '               <t:BaseShape>IdOnly</t:BaseShape>' +\n        '               <t:AdditionalProperties>' +\n        '                   <t:FieldURI FieldURI=\"item:Subject\" />' +\n        '                   <t:FieldURI FieldURI=\"item:DateTimeReceived\" />' +\n        '               </t:AdditionalProperties>' +\n        '           </m:ItemShape>' +\n        '           <m:FoldersToIgnore>' +\n        '               <t:DistinguishedFolderId Id=\"deleteditems\" />' +\n        '               <t:DistinguishedFolderId Id=\"drafts\" />' +\n        '           </m:FoldersToIgnore>' +\n        '           <m:SortOrder>TreeOrderDescending</m:SortOrder>' +\n        '           <m:Conversations>' +\n        '               <t:Conversation>' +\n        '                   <t:ConversationId Id=\"' + conversationId + '\" />' +\n        '               </t:Conversation>' +\n        '           </m:Conversations>' +\n        '       </m:GetConversationItems>';\n    soap = getSoapHeader(soap);\n    // Make EWS call\n    asyncEws(soap, function (xmlDoc) {\n        let nodes = getNodes(xmlDoc, \"t:Subject\");\n        let msgs = [];\n        for (let msg of nodes) {\n            msgs.push(msg.textContent);\n        }\n        successCallback(msgs);\n\n    }, function (errorDetails) {\n        if (errorCallback != null)\n            errorCallback(errorDetails);\n    });\n};\n\nfunction setCategory(itemId, category, context, callback) {\n    // ignore missing item ID to improve UX\n    if (!itemId) {\n        console.log(\"Ignoring invalid itemId in setCategory: \" + itemId)\n        callback(context);\n        return;\n    }\n\n    let soapUpdate = `<UpdateItem MessageDisposition=\"SaveOnly\" ConflictResolution=\"AlwaysOverwrite\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n\t\t\t<ItemChanges>\n\t\t\t\t<t:ItemChange>\n\t\t\t\t\t<t:ItemId Id=\"`+ itemId + `\"/>\n\t\t\t\t\t<t:Updates>\n\t\t\t\t\t\t<t:SetItemField>\n\t\t\t\t\t\t\t<t:ExtendedFieldURI PropertySetId=\"00020329-0000-0000-C000-000000000046\" PropertyName=\"Keywords\" PropertyType=\"StringArray\" />\n\t\t\t\t\t\t\t<t:Message>\n\t\t\t\t\t\t\t\t<t:ExtendedProperty>\n\t\t\t\t\t\t\t\t\t<t:ExtendedFieldURI PropertySetId=\"00020329-0000-0000-C000-000000000046\" PropertyName=\"Keywords\" PropertyType=\"StringArray\" />\n\t\t\t\t\t\t\t\t\t<t:Values>\n\t\t\t\t\t\t\t\t\t\t<t:Value>`+ category + `</t:Value>\n\t\t\t\t\t\t\t\t\t</t:Values>\n\t\t\t\t\t\t\t\t</t:ExtendedProperty>\n\t\t\t\t\t\t\t</t:Message>\n\t\t\t\t\t\t</t:SetItemField>\n\t\t\t\t\t</t:Updates>\n\t\t\t\t</t:ItemChange>\n\t\t\t</ItemChanges>\n\t\t</UpdateItem>`;\n\n    let soap = getSoapHeader(soapUpdate);\n\n    asyncEws(soap, function (xmlDoc) {\n        console.log(\"Successfully set category: \" + xmlDoc);\n        callback(context);\n\n    }, function (errorDetails) {\n        console.log(\"Error setting category: \" + errorDetails);\n        callback(context);\n    });\n\n}\n\nfunction getAttachmentClassification(callback) {\n\n    Office.context.mailbox.item.saveAsync(\n        function (result) {\n            let itemId = result.value;\n\n            getAttachmentIDs(itemId, function (ids) {\n\n                if (ids.length == 0) {\n                    callback(\"\");\n                    return;\n                }\n\n                Office.context.mailbox.getCallbackTokenAsync(function (asyncResult) {\n\n                    if (asyncResult.status != Office.AsyncResultStatus.Succeeded) {\n                        return;\n                    }\n\n                    let token = asyncResult.value;\n\n                    let serviceRequest = {\n                        token: token,\n                        ews_url: Office.context.mailbox.ewsUrl,\n                        attachment_ids: ids\n                    };\n\n                    let body = JSON.stringify(serviceRequest);\n\n                    // fetch was not working in Edge (zero byte body)\n                    var xmlhttp = new XMLHttpRequest(); \n                    xmlhttp.open(\"POST\", \"https://localhost:4430/api/attachment\");\n                    xmlhttp.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n                    xmlhttp.onreadystatechange = () => {\n                        if (xmlhttp.readyState === 4) {\n                            callback(JSON.parse(xmlhttp.response));\n                        }\n                    };\n                    xmlhttp.send(body);\n\n                });\n\n\n            }, function (error) {\n                console.log(error);\n            })\n\n\n        });\n\n\n\n}\n\n\nfunction getAttachmentIDs(messageID, successCallback, errorCallback) {\n    let soap = `<m:GetItem>\n    <m:ItemShape>\n      <t:BaseShape>IdOnly</t:BaseShape>\n      <t:AdditionalProperties>\n        <t:FieldURI FieldURI=\"item:Attachments\" />\n      </t:AdditionalProperties>\n    </m:ItemShape>\n    <m:ItemIds>\n      <t:ItemId Id=\"`+ messageID + `\" />\n    </m:ItemIds>\n  </m:GetItem>`;\n\n    soap = getSoapHeader(soap);\n    // Make EWS call\n    asyncEws(soap, function (xmlDoc) {\n        let nodes = getNodes(xmlDoc, \"t:AttachmentId\");\n        let msgs = [];\n        for (let msg of nodes) {\n            console.log(msg.attributes);\n            msgs.push(msg.attributes[\"Id\"].value);\n        }\n        successCallback(msgs);\n\n    }, function (errorDetails) {\n        if (errorCallback != null)\n            errorCallback(errorDetails);\n    });\n};\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["mailboxItem","mailbox","__webpack_require__","g","globalThis","this","Function","e","window","self","global","undefined","Office","onReady","info","name","context","item","classifications","classification","globalFunction","actionMarkFactory","console","log","concat","host","platform","validateBody","event","subject","getAsync","asyncContext","asyncResult","callback","value","curClassification","getClassification","notificationMessages","addAsync","type","message","completed","allowEvent","res","saveAsync","result","itemId","category","asyncEws","getSoapHeader","xmlDoc","errorDetails","setCategory","setAsync","status","AsyncResultStatus","Failed","subjectOnSendChange","normalizeClassification","successCallback","errorCallback","ids","length","getCallbackTokenAsync","Succeeded","serviceRequest","token","ews_url","ewsUrl","attachment_ids","body","JSON","stringify","xmlhttp","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","parse","response","send","error","_step3","msgs","_iterator3","_createForOfIteratorHelper","getNodes","s","n","done","msg","attributes","push","err","f","forceClassificationSubject","classifierRegexp","classifiedSubjectRegexp","removeClassification","str","replace","trim","addClassificationPrefix","toLowerCase","test","matches","match","requestedClassification","successMessage","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","icon80","persistent","errorMessage","ErrorMessage","ret","replaceAsync","conversationId","soap","_step2","_iterator2","textContent","findConversationSubjects","values","_step","classifiedConversation","classificationConversation","_iterator","makeEwsRequestAsync","ewsResult","DOMParser","parseFromString","node","elementNameWithNS","elementWithoutNS","substring","indexOf","retVal","getElementsByTagName","request"],"sourceRoot":""}